<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="simulate-mobile-users-reasons" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ANDROID_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">ANDROID_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(ANDROID_USERNAME,bf501d1e-79f3-4597-aaa9-385494b4388a)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ANDROID_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">ANDROID_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(ANDROID_PASSWORD,6f07c127-1031-4d84-ae2e-0aac972b76aa)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IOS_USERNAME" elementType="Argument">
            <stringProp name="Argument.name">IOS_USERNAME</stringProp>
            <stringProp name="Argument.value">${__P(IOS_USERNAME,1dc89010-a674-46e6-bcd9-e080b678fb16)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="IOS_PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">IOS_PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(IOS_PASSWORD,9024c0a0-c33c-45e4-a935-63ec7a04fb09)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_PROTOCOL" elementType="Argument">
            <stringProp name="Argument.name">SERVER_PROTOCOL</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_PROTOCOL,https)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_HOST" elementType="Argument">
            <stringProp name="Argument.name">SERVER_HOST</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_HOST,staging-mcs.c-b4.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SERVER_PORT" elementType="Argument">
            <stringProp name="Argument.name">SERVER_PORT</stringProp>
            <stringProp name="Argument.value">${__P(SERVER_PORT,443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONTEXT_ROOT" elementType="Argument">
            <stringProp name="Argument.name">CONTEXT_ROOT</stringProp>
            <stringProp name="Argument.value">${__P(CONTEXT_ROOT,unifiedpush-server)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NUMBER_OF_THREADS" elementType="Argument">
            <stringProp name="Argument.name">NUMBER_OF_THREADS</stringProp>
            <stringProp name="Argument.value">${__P(NUMBER_OF_THREADS,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOP_COUNT" elementType="Argument">
            <stringProp name="Argument.name">LOOP_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(LOOP_COUNT,5)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TASKS_RESPONSE_RATIO" elementType="Argument">
            <stringProp name="Argument.name">TASKS_RESPONSE_RATIO</stringProp>
            <stringProp name="Argument.value">${__P(TASKS_RESPONSE_RATIO,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="OUTPUT_SUB_FOLDER" elementType="Argument">
            <stringProp name="Argument.name">OUTPUT_SUB_FOLDER</stringProp>
            <stringProp name="Argument.value">${__P(OUTPUT_SUB_FOLDER,mobile_jmeter)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470652113000</longProp>
        <longProp name="ThreadGroup.end_time">1470652113000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BS PreProcessor - Prepare Basic Authentication" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.apache.commons.codec.binary.Base64;
byte[] iosUsernamePassword = Base64.encodeBase64(&quot;${IOS_USERNAME}:${IOS_PASSWORD}&quot;.getBytes());
props.put(&quot;base64IosHeaderValue&quot;, new String(iosUsernamePassword));

byte[] androidUsernamePassword = Base64.encodeBase64(&quot;${ANDROID_USERNAME}:${ANDROID_PASSWORD}&quot;.getBytes());
props.put(&quot;base64AndroidHeaderValue&quot;, new String(androidUsernamePassword));</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler open files" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.jmeter.util.JMeterUtils; 
import java.io.FileReader;
import java.util.*;


final static String THREAD_FILE_PREFIX = &quot;THREAD_&quot;;
String baseDir = FileServer.getFileServer().getBaseDir();
int numOfThreads = Integer.parseInt(vars.get(&quot;NUMBER_OF_THREADS&quot;));

String outputDir = vars.get(&quot;OUTPUT_SUB_FOLDER&quot;);

// Open file writers array according to number of threads
// All files are stored under OS temp dir.
for(int threadCounter = 0; threadCounter&lt;numOfThreads ; threadCounter++ ) {
	log.info(&quot;-----open file &quot; + outputDir + &quot;/&quot; + THREAD_FILE_PREFIX + threadCounter + &quot;-----&quot;);
 	FileServer.getFileServer().reserveFile(outputDir + &quot;/&quot; + THREAD_FILE_PREFIX + threadCounter);	
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOP_COUNT}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${NUMBER_OF_THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470652568000</longProp>
        <longProp name="ThreadGroup.end_time">1470652568000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler - Read next line" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.commons.codec.binary.Base64;
import java.io.FileReader;
import java.util.*;

String THREAD_FILE_PREFIX = &quot;THREAD_&quot;;
String baseDir = FileServer.getFileServer().getBaseDir();
int threamNum = ctx.getThreadNum();
String fileName = vars.get(&quot;OUTPUT_SUB_FOLDER&quot;) + &quot;/&quot; + THREAD_FILE_PREFIX + threamNum;
int lineCounter = 0; 
String line = FileServer.getFileServer().readLine(fileName, false, false);
log.info(&quot;--------------Reading CSV--------------&quot;);
if  (line != null) {
	String[] words = line.split(&quot;,&quot;);
	vars.put(&quot;IOS_TOKENID&quot;, words[1]);
	vars.put(&quot;AND_TOKENID&quot;, words[2]);
	vars.put(&quot;ALIAS&quot;, words[5]);
	log.info(&quot;--------------Reading CSV line (&quot; + words[0] + &quot;) from &quot; + fileName);
	log.info(&quot;--------------Alias: &quot;+vars.get(&quot;ALIAS&quot;));
	log.info(&quot;--------------IOS_TOKENID: &quot;+vars.get(&quot;IOS_TOKENID&quot;));
	log.info(&quot;--------------AND_TOKENID: &quot;+vars.get(&quot;AND_TOKENID&quot;));
	
	byte[] androidTokenBase64 = Base64.encodeBase64(vars.get(&quot;AND_TOKENID&quot;).getBytes());
	props.put(&quot;androidTokenBase64&quot;, new String(androidTokenBase64));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code 200 Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${SERVER_HOST}</stringProp>
            <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol">${SERVER_PROTOCOL}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Get reasons-list" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${CONTEXT_ROOT}/rest/document/application/null/reason</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${__P(base64AndroidHeaderValue)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">device-token</stringProp>
                  <stringProp name="Header.value">${__P(androidTokenBase64)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER_HOST}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Linux; Android 6.0.1; SM-N910F Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/51.0.2704.81 Mobile Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">com.cb4.mobile.cretail</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="jsr223 cache Reasons Json String BeanShell PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">7f98f172-b1b8-4b67-8060-ee83f07dc743</stringProp>
              <stringProp name="script">
log.info(&quot;caching reasons&quot;);
def slurper = new groovy.json.JsonSlurper();
String reasonsJsonString = prev.getResponseDataAsString();

def obj = slurper.parseText(reasonsJsonString);
vars.put(&quot;REASONS_JSON_STRING&quot;,reasonsJsonString);

def reasonsJsonObj = slurper.parseText(reasonsJsonString);
def doneReasons = reasonsJsonObj.reasons.doneReasons;
def notDoneReasons = reasonsJsonObj.reasons.undoneReasons;

def builder = new groovy.json.JsonBuilder(doneReasons);
def jsonStr = builder.toString();
vars.put(&quot;DONE_REASONS_JSON_STRING&quot;,jsonStr);

builder = new groovy.json.JsonBuilder(notDoneReasons);
jsonStr = builder.toString();
vars.put(&quot;NOT_DONE_REASONS_JSON_STRING&quot;,jsonStr);
log.info(&quot;done caching reasons&quot;);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code 200 Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - Get actions-list" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${CONTEXT_ROOT}/rest/document/application/${ALIAS}/task</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${__P(base64AndroidHeaderValue)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">device-token</stringProp>
                  <stringProp name="Header.value">${__P(androidTokenBase64)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER_HOST}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Linux; Android 6.0.1; SM-N910F Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/51.0.2704.81 Mobile Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">com.cb4.mobile.cretail</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="jsr223 cache tasks Json String BeanShell PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">7f98f172-b1b8-4b67-8060-ee83f07dc743</stringProp>
              <stringProp name="script">def slurper = new groovy.json.JsonSlurper();

String tasksJsonString = prev.getResponseDataAsString();
vars.put(&quot;TASKS_JSON_STRING&quot;,tasksJsonString);

def obj = slurper.parseText(tasksJsonString);
if(obj.tasks == null){
	log.info(vars.get(&quot;ALIAS&quot;) + &quot; did not get any actions&quot;);
	// TODO: need to make it go to next loop some how.. i coudn&apos;t find out how to do this yet so it currently throws exceptions when calling the next line
	}
def numOfTasks = obj.tasks.size();
log.info(&quot;deploy id = &quot;+obj.deployId);
vars.put(&quot;DEPLOY_ID&quot;,obj.deployId.toString());
vars.put(&quot;NUM_OF_TASKS&quot;,numOfTasks.toString());
log.info(&quot;Total number of tasks for current user: &quot; + numOfTasks.toString());

def numberOfResponses = (int)(Float.valueOf(vars.get(&quot;TASKS_RESPONSE_RATIO&quot;)) * numOfTasks);
log.info(&quot;Total number of reasons for current user &quot; + numberOfResponses.toString());
log.info(&quot;tasks: &quot; + tasksJsonString);
vars.put(&quot;NUM_OF_RESPONCES_TO_LOOP&quot;,numberOfResponses.toString());
log.info(&quot;numberOfResponses.toString(): &quot;+numberOfResponses.toString());</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code 200 Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request - responses of a user to the actions" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${HTTP_REASONS_BODY}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${CONTEXT_ROOT}/rest/document/${ALIAS}/status/${DEPLOY_ID}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - prepare json reasons to send" enabled="true">
              <stringProp name="cacheKey"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper
import groovy.json.JsonOutput

class State { int reasonId; String remark;  boolean viewed; String state; long updateDate}
class StateList { List&lt;State&gt; states }
class DeployInfo { long deployId; String alias; Map&lt;String, StateList&gt; actions }

log.info(&quot;------------------------------------------------------------------------------------&quot;)
String doneReasonsJsonSring = vars.get(&quot;DONE_REASONS_JSON_STRING&quot;)
String notDoneReasonsJsonSring = vars.get(&quot;NOT_DONE_REASONS_JSON_STRING&quot;)
String tasksJsonSring = vars.get(&quot;TASKS_JSON_STRING&quot;)

JsonSlurper slurper = new JsonSlurper()
def doneReasonsJsonObj = slurper.parseText(doneReasonsJsonSring)
def notDoneReasonsJsonObj = slurper.parseText(notDoneReasonsJsonSring)
def tasksJsonObj = slurper.parseText(tasksJsonSring)

long deployId = Long.valueOf(vars[&quot;DEPLOY_ID&quot;])
def alias = vars[&quot;ALIAS&quot;]
long currentDate = System.currentTimeMillis()
String stateStatus
DeployInfo deployInfo = new DeployInfo()
deployInfo.deployId = deployId
deployInfo.alias = alias
deployInfo.actions = [:]

int numOfTasksToReponse = Integer.valueOf(vars[&quot;NUM_OF_RESPONCES_TO_LOOP&quot;])
for( int i=0 ; i &lt; numOfTasksToReponse ; i++) {
    def task = tasksJsonObj.tasks[i]
    String taskId = task.id
    String taskAction = task.action
    String flavour = task.flavour

    int doneOrNot = i % 2
    if (doneOrNot == 0) {
        stateStatus = &apos;done&apos;
        availableReasons = doneReasonsJsonObj.findAll { it.action == taskAction &amp;&amp; it.flavour == flavour}
    } else {
        stateStatus = &apos;notDone&apos;
        availableReasons = notDoneReasonsJsonObj.findAll { it.action == taskAction &amp;&amp; it.flavour == flavour}
    }

    int reasonIndex = i % availableReasons.size()
    def reasonId = availableReasons[reasonIndex].id

    State state = new State()
    state.reasonId = reasonId
    state.remark = &quot;&quot;
    state.viewed = true
    state.state = stateStatus
    state.updateDate = currentDate

    StateList stateList = new StateList()
    stateList.states = []
    stateList.states.add(state)

    deployInfo.actions[taskId] = stateList

}
String responsesJson = JsonOutput.toJson(deployInfo)
log.info(responsesJson)
log.info(&quot;-----------&quot;)
vars.put(&apos;HTTP_REASONS_BODY&apos;, responsesJson)
String jsonOutFile = props.get(&quot;OUTPUT_SUB_FOLDER&quot;) + &quot;/&quot; + deployId + &quot;_&quot; + alias + &quot;_&quot; + &quot;responses.json&quot;
vars.put(&quot;jsonOutFile&quot;,jsonOutFile)</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${__P(base64AndroidHeaderValue)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">device-token</stringProp>
                  <stringProp name="Header.value">${__P(androidTokenBase64)}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${SERVER_HOST}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Linux; Android 6.0.1; SM-N910F Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/51.0.2704.81 Mobile Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">com.cb4.mobile.cretail</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response code 200 Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor -- write responses json file" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import org.apache.jmeter.services.FileServer;
String outFile = vars.get(&quot;jsonOutFile&quot;);
log.info(&quot;-----writing responses json file: &quot;+outFile+&quot;------&quot;);
FileServer.getFileServer().reserveFile(outFile);	
FileServer.getFileServer().write(outFile, vars.get(&quot;HTTP_REASONS_BODY&quot;));
FileServer.getFileServer().closeFile(outFile);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1470654841000</longProp>
        <longProp name="ThreadGroup.end_time">1470654841000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BS Sampler - Close files" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.jmeter.services.FileServer;
import org.apache.jmeter.util.JMeterUtils; 
import java.io.FileReader;
import java.util.*;

final static String THREAD_FILE_PREFIX = &quot;THREAD_&quot;;
String baseDir = FileServer.getFileServer().getBaseDir();
int numOfThreads = Integer.parseInt(vars.get(&quot;NUMBER_OF_THREADS&quot;));
String outDir = vars.get(&quot;OUTPUT_SUB_FOLDER&quot;);
	
// Open file writers array according to number of threads
// All files are stored under OS temp dir.
for(int threadCounter = 0; threadCounter&lt;numOfThreads ; threadCounter++ ) {
 	FileServer.getFileServer().closeFile(outDir + &quot;/&quot; + THREAD_FILE_PREFIX + threadCounter); 	
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
